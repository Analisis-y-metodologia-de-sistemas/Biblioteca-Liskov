name: 🧪 CI Pipeline - Biblioteca Liskov

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install development dependencies
        pip install flake8 black isort mypy bandit safety

    - name: 🔍 Lint with flake8
      run: |
        echo "🔍 Running flake8 linting..."
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🎨 Check code formatting with black
      run: |
        echo "🎨 Checking code formatting..."
        black --check --diff src/ tests/

    - name: 📐 Check import sorting with isort
      run: |
        echo "📐 Checking import sorting..."
        isort --check-only --diff src/ tests/

    - name: 🔒 Security check with bandit
      run: |
        echo "🔒 Running security analysis..."
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll

    - name: 🛡️ Check dependencies with safety
      run: |
        echo "🛡️ Checking dependencies for vulnerabilities..."
        safety check --json --output safety-report.json || true
        safety check

    - name: 📊 Type checking with mypy
      run: |
        echo "📊 Running type checking..."
        mypy src/ --ignore-missing-imports --no-strict-optional || true

    - name: 🧪 Run tests with pytest
      run: |
        echo "🧪 Running test suite..."
        python -m pytest tests/ -v --tb=short --cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=80
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: 📈 Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: 💾 Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
          coverage.xml

  build-and-package:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: 🏗️ Build package
      run: |
        echo "🏗️ Building Python package..."
        python -m build

    - name: ✅ Check package
      run: |
        echo "✅ Checking package integrity..."
        python -m twine check dist/*

    - name: 💾 Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-artifacts
        path: dist/